from __future__ import print_function
import logging
import os
import shutil
import fileinput
from fusesoc.provider.provider import Provider
from fusesoc.utils import Launcher

logger = logging.getLogger(__name__)

class Newad2wb(Provider):

    def _checkout(self, local_dir):
        core_files  = self.config.get('core_files')
        search_dirs  = self.config.get('search_dirs')

        if not os.path.isdir(local_dir):
            os.mkdir(local_dir)
        src_files = core_files.values()

        for f in src_files:
            f_src = os.path.join(self.core_root, f)
            f_dst = os.path.join(local_dir, f)
            if os.path.exists(f_src):
                d_dst = os.path.dirname(f_dst)
                if not os.path.exists(d_dst):
                    os.makedirs(d_dst)
                shutil.copyfile(f_src, f_dst)
            else:
                logger.error('Cannot find file %s' % f_src)

        for mod_name, f_name in core_files.items():
            core_basename = os.path.basename(f_name)
            core_dirname = os.path.dirname(f_name)

            core_filename, core_fileext  = os.path.splitext(core_basename)

            gen_cheby_file = local_dir + '/' + core_dirname + '/' + core_filename + '.cheby'
            gen_newad_auto_file = local_dir + '/' + core_dirname + '/' + core_filename + '_auto.vh'
            gen_newad_addr_map_file = local_dir + '/' + core_dirname + '/' + 'addr_map_' + core_filename + '.vh'
            gen_vhdl_csr_file = local_dir + '/' + core_dirname + '/' + core_filename + '_csr.vhd'
            gen_verilog_csr_file = local_dir + '/' + core_dirname + '/' + core_filename + '_csr.v'
            gen_verilog_wrapper_file = local_dir + '/' + core_dirname + '/' + core_filename + '_wb.v'

            logger.info("Using Newad2Wb to generate core " + f_name)

            newad_dirs = ''
            for dir in search_dirs:
                newad_dir_dst = os.path.join(local_dir, dir)
                newad_dirs += newad_dir_dst + ','

            # newad to Cheby decriptor.
            # FIXME. We should just generate what is needed, not additional
            # files just for the sake of compatibility. These other files
            # should be probably generated by another provider instance
            # or some flags in the .yaml file.
            args = ['-i', f_name, '-c', gen_cheby_file,
                    '-o', gen_newad_auto_file,
                    '-a', gen_newad_addr_map_file,
                    '-b', '0',
                    '-l', '-w', '23', '-d', newad_dirs]
            Launcher('newad.py', args, cwd=local_dir).run()
            # Cheby to VHDL CSR
            with open(gen_vhdl_csr_file, 'w+') as f:
                args = ['--gen-wbgen-vhdl', gen_cheby_file]
                Launcher('cheby', args, cwd=local_dir, stdout=f).run()
            # VHDL to Verilog
            args = [gen_vhdl_csr_file, gen_verilog_csr_file]
            Launcher('vhd2vl', args, cwd=local_dir).run()
            # vhd2vl does not convert between true/false in VHDL to 1/0 in Verilog
            f = fileinput.input(gen_verilog_csr_file, inplace=True)
            for line in f:
                print(line.replace('true', '1').replace('false', '0'), end='')
            f.close()
            # Cheby Wishbone wrapper
            with open(gen_verilog_wrapper_file, 'w+') as f:
                args = ['--gen-verilog-wb-wrapper', gen_cheby_file,
                        '--verilog-in-file', f_name,
                        '--verilog-mod-name', mod_name]
                Launcher('cheby', args, cwd=local_dir, stdout=f).run()
